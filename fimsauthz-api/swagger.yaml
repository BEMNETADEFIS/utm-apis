---
swagger: "2.0"
info:
  description: "FIMS_Authz provides authorization services for FIMS and USS stakeholders\
    \ within UTM.  FIMS_Authz is an OAuth 2.0 compliant server.  The endpoints and\
    \ data exchnages provided by this server are based on open standards."
  version: "v1"
  title: "Flight Information Management System (FIMS) Authorization (Authz) Server"
host: "tmiserver.arc.nasa.gov"
basePath: "/oauth"
schemes:
- "https"
security:
- application:
  - "Baseline_USS"
paths:
  /authorize:
    get:
      tags:
      - "Restful Endpoints"
      summary: "Obtain an authorization grant (unsupported in UTM, but required by\
        \ OAuth specification)"
      description: "This endpoint is required as per RFC 6749.  However since FIMS\
        \ only supports the Client Credentials Grant flow, there is no use of this\
        \ endpoint currently. It is defined in case there is an use case in the future\
        \ that requires it. Currently returns 501 (Not implemented) on a GET.  POST\
        \ not supported at all.\n"
      operationId: "getAuthorizationGrant"
      parameters: []
      responses:
        501:
          description: "Not Implemented"
          schema:
            $ref: "#/definitions/Version"
  /token:
    post:
      tags:
      - "Restful Endpoints"
      summary: "Obtain an access token."
      description: "This endpoint is required as per RFC 6749.  A POST to this endpoint\
        \ acts as a request for an access token. This endpoint is protected using\
        \ TLS client authentication. \n"
      operationId: "obtainAccessToken"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "grant_type"
        in: "formData"
        description: "Type of grant. Must be 'client_credentials'."
        required: true
        type: "string"
        enum:
        - "client_credentials"
      - name: "scope"
        in: "formData"
        description: "dfs"
        required: true
        type: "string"
        enum:
        - "scope1"
        - "scope2"
        - "scope3"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/TokenResponse"
  /token_key:
    get:
      tags:
      - "Restful Endpoints"
      summary: "Get the OAuth server public key required for checking token signatures."
      operationId: "getServerTokenKey"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/TokenKeyResponse"
  /introspect:
    get:
      tags:
      - "Restful Endpoints"
      summary: "Check a token"
      operationId: "tokenIntrospection"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "formData"
        description: "The string value of the token.  For access tokens, this is the\
          \ \"access_token\" value returned from the token endpoint defined in OAuth\
          \ 2.0 [RFC6749], Section 5.1.  For refresh tokens, this is the \"refresh_token\"\
          \ value returned from the token endpoint as defined in OAuth 2.0 [RFC6749],\
          \ Section 5.1."
        required: true
        type: "string"
        format: "jwt"
      - name: "token_type_hint"
        in: "formData"
        description: "A hint about the type of the token submitted for introspection.\
          \  The protected resource MAY pass this parameter to help the authorization\
          \ server optimize the token lookup.  If the server is unable to locate the\
          \ token using the given hint, it MUST extend its search across all of its\
          \ supported token types.  An authorization server MAY ignore this parameter,\
          \ particularly if it is able to detect the token type automatically.  Values\
          \ for this field are defined in the \"OAuth Token Type Hints\" registry\
          \ defined in OAuth Token Revocation [RFC7009]."
        required: false
        type: "string"
        enum:
        - "access_token"
        - "refresh_token"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/IntrospectionResponse"
  /revoke:
    post:
      tags:
      - "Restful Endpoints"
      summary: "Post a token revocation request"
      operationId: "postRevocationRequest"
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
      - name: "token"
        in: "formData"
        description: "The Java Web Token that the client wants revoked."
        required: true
        type: "string"
        format: "jwt"
      - name: "token_hint"
        in: "formData"
        description: "A hint about the type of the token submitted for revocation.\
          \  Clients MAY pass this parameter in order to help the authorization server\
          \ to optimize the token lookup.  If the server is unable to locate the token\
          \ using the given hint, it MUST extend its search across all of its supported\
          \ token types.  An authorization server MAY ignore this parameter, particularly\
          \ if it is able to detect the token type automatically."
        required: false
        type: "string"
        enum:
        - "access_token"
        - "refresh_token"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
  /oauth-authorization-server:
    get:
      tags:
      - "Restful Endpoints"
      summary: "Get API Info"
      operationId: "getApiInfos"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Metadata"
securityDefinitions:
  application:
    type: "oauth2"
    tokenUrl: "http://thisserver.com/oauth/token"
    flow: "application"
    scopes:
      Baseline_USS: "A Baseline USS that can perform the set of essential USS requests"
      PublicSafety_USS: "A USS with the capability to manaage public safety operations"
      Operations_FIMS: "For FIMS to perform baseline FIMS requests"
definitions:
  TokenResponse:
    type: "object"
    properties:
      access_token:
        $ref: "#/definitions/JwsCompactSerialization"
      token_type:
        type: "string"
        enum:
        - "bearer"
      jti:
        type: "string"
        format: "uuid"
  JwsCompactSerialization:
    type: "object"
    properties:
      jose_header:
        $ref: "#/definitions/JoseHeader"
      jws_payload:
        $ref: "#/definitions/JwtClaimsSet"
      jws_signature:
        type: "string"
        description: "See RFC 7515 for details."
    description: "The token provided by the FIMS Authorization Server is a JWS representing\
      \ a JWT.  The token is actually a JWS Compact Serialization string as described\
      \ in RFC 7515.  For clarity of documentation, we represent the pre-serialized\
      \ components here as a JSON schema.  This may be problematic when using automated\
      \ tools to validate the schema using this file as input."
  JoseHeader:
    type: "object"
    properties:
      alg:
        type: "string"
      typ:
        type: "string"
        description: "The FIMS Authorization Server only support 'JWT' (JSON Web Token)\
          \ as the algorithm type."
        enum:
        - "JWT"
  TokenKeyResponse:
    type: "object"
    properties:
      alg:
        type: "string"
        description: "A designator for the algorithm used to sign the key.  Values\
          \ defined by a Java specfication from Oracle (http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html)."
      value:
        type: "string"
        description: "A key signed by the algorithm noted in 'alg' property.  The\
          \ key is preceded by '-----BEGIN PUBLIC KEY-----\\n' without the single\
          \ quotes and appended with '\\n-----END PUBLIC KEY-----' without the single\
          \ quotes."
  IntrospectionResponse:
    type: "object"
    required:
    - "active"
    properties:
      active:
        type: "boolean"
        description: "Boolean indicator of whether or not the presented token is currently\
          \ active.  The specifics of a token's \"active\" state will vary depending\
          \ on the implementation of the authorization server and the information\
          \ it keeps about its tokens, but a \"true\" value return for the \"active\"\
          \ property will generally indicate that a given token has been issued by\
          \ this authorization server, has not been revoked by the resource owner,\
          \ and is within its given time window of validity (e.g., after its issuance\
          \ time and before its expiration time).  See Section 4 for information on\
          \ implementation of such checks."
  JwtClaimsSet:
    type: "object"
    properties:
      iss:
        type: "string"
        format: "URL"
        description: "The \"iss\" (issuer) claim identifies the principal that issued\
          \ the JWT. The URL of the FIMS Authorization Server."
      sub:
        type: "string"
        description: "The \"sub\" (subject) claim identifies the principal that is\
          \ the subject of the JWT."
      exp:
        type: "integer"
        format: "unix-time"
        description: "The \"exp\" (expiration time) claim identifies the expiration\
          \ time on or after which the JWT MUST NOT be accepted for processing.  The\
          \ processing of the \"exp\" claim requires that the current date/time MUST\
          \ be before the expiration date/time listed in the \"exp\" claim."
      nbf:
        type: "integer"
        format: "unix-time"
        description: "The \"nbf\" (not before) claim identifies the time before which\
          \ the JWT MUST NOT be accepted for processing.  The processing of the \"\
          nbf\" claim requires that the current date/time MUST be after or equal to\
          \ the not-before date/time listed in the \"nbf\" claim."
      iat:
        type: "integer"
        format: "unix-time"
        description: "The \"iat\" (issued at) claim identifies the time at which the\
          \ JWT was issued.  This claim can be used to determine the age of the JWT."
      jti:
        type: "string"
        format: "uuid"
        description: "The \"jti\" (JWT ID) claim provides a unique identifier for\
          \ the JWT. For this server, this is satisfied by the use of a UUID."
      scope:
        type: "string"
        enum:
        - "USS_BASIC"
        - "USS_PUBLICSAFETY"
        - "FIMS_BASIC"
        - "FIMS_USSDISCOVERY"
  Metadata:
    type: "object"
    required:
    - "authorization_endpoint"
    - "issuer"
    properties:
      issuer:
        type: "string"
        format: "url"
        description: "The authorization server's issuer identifier, which is a URL\
          \ that uses the \"https\" scheme and has no query or fragment components.\
          \  This is the location where \".well-known\" RFC 5785 resources containing\
          \ information about the authorization server are published.  Using these\
          \ well-known resources is described in Section 3.  The issuer identifier\
          \ is used to prevent authorization server mix-up attacks, as described in\
          \ \"OAuth 2.0 Mix-Up Mitigation\"."
      authorization_endpoint:
        type: "string"
        format: "url"
        description: "URL of the authorization server's authorization endpoint [RFC6749]."
      token_endpoint:
        type: "string"
        format: "url"
        description: "URL of the authorization server's token endpoint [RFC6749].\
          \  This is REQUIRED unless only the implicit grant type is used."
      scopes_supported:
        type: "array"
        description: "JSON array containing a list of the OAuth 2.0 [RFC6749] \"scope\"\
          \ values that this authorization server supports. Servers MAY choose not\
          \ to advertise some supported scope values even when this parameter is used."
        items:
          type: "string"
      response_types_supported:
        type: "array"
        description: "JSON array containing a list of the OAuth 2.0 \"response_type\"\
          \ values that this authorization server supports. These values are required\
          \ for responses from calls to the authorization endpoint, thus this array\
          \ may be empty if no grant flows use the authorization endpoint. (definitions\
          \ in RFC 7591)"
        items:
          type: "string"
      response_modes_supported:
        type: "array"
        description: "JSON array containing a list of the OAuth 2.0 \"response_mode\"\
          \ values that this authorization server supports, as specified in OAuth\
          \ 2.0 Multiple Response Type Encoding Practices.  If omitted, the default\
          \ is \"[\"query\", \"fragment\"]\".  The response mode value \"form_post\"\
          \ is also defined in OAuth 2.0 Form Post Response Mode.dd"
        items:
          type: "string"
      grant_types_supported:
        type: "array"
        description: "JSON array containing a list of the OAuth 2.0 grant type values\
          \ that this authorization server supports. (definitions in RFC 7591)"
        items:
          type: "string"
      token_endpoint_auth_methods_supported:
        type: "array"
        description: "JSON array containing a list of client authentication methods\
          \ supported by this token endpoint.  Client authentication method values\
          \ are used in the \"token_endpoint_auth_method\" parameter defined in Section\
          \ 2 of [RFC7591].  If omitted, the default is \"client_secret_basic\" --\
          \ the HTTP Basic Authentication Scheme specified in Section 2.3.1 of OAuth\
          \ 2.0 [RFC6749]."
        items:
          type: "string"
      service_documentation:
        type: "string"
        format: "url"
        description: "URL of a page containing human-readable information that developers\
          \ might want or need to know when using the authorization server.  In particular,\
          \ if the authorization server does not support Dynamic Client Registration,\
          \ then information on how to register clients needs to be provided in this\
          \ documentation."
      op_tos_uri:
        type: "string"
        format: "url"
        description: "URL that the authorization server provides to the person registering\
          \ the client to read about the authorization server's terms of service.\
          \  The registration process SHOULD display this URL to the person registering\
          \ the client if it is given."
      revocation_endpoint:
        type: "string"
        format: "url"
        description: "URL of the authorization server's OAuth 2.0 revocation endpoint\
          \ [RFC7009]."
      revocation_endpoint_auth_methods_supported:
        type: "array"
        description: "JSON array containing a list of client authentication methods\
          \ supported by this revocation endpoint.  The valid client authentication\
          \ method values are those registered in the IANA \"OAuth Token Endpoint\
          \ Authentication Methods\" registry [IANA.OAuth.Parameters]."
        items:
          type: "string"
      introspection_endpoint:
        type: "string"
        format: "url"
        description: "URL of the authorization server's OAuth 2.0 introspection endpoint\
          \ [RFC7662]."
      introspection_endpoint_auth_methods_supported:
        type: "array"
        description: "JSON array containing a list of client authentication methods\
          \ supported by this introspection endpoint.  The valid client authentication\
          \ method values are those registered in the IANA \"OAuth Token Endpoint\
          \ Authentication Methods\" registry [IANA.OAuth.Parameters] or those registered\
          \ in the IANA \"OAuth Access Token Types\" registry [IANA.OAuth.Parameters].\
          \  (These values are and will remain distinct, due to Section 7.2.)"
        items:
          type: "string"
      jwt_claims:
        $ref: "#/definitions/JwtClaimsSet"
  Version:
    type: "object"
    properties:
      version:
        type: "string"
        description: "Version number for the API"
      title:
        type: "string"
        description: "Title of the API"
      documentation:
        type: "string"
        description: "URL for API Documentation"
externalDocs:
  description: "SwaggerHub Documentation"
  url: "https://app.swaggerhub.com/apis/utm/fims_authz/"
